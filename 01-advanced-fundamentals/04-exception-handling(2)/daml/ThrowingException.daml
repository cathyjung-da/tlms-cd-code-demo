-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All Rights Reserved. 
-- SPDX-License-Identifier: Apache-2.0

module ThrowingException where

import Daml.Script
import DA.Exception
import DA.Action (when)

template SocialNetworkUser
    with
        username: Party
        following: [Party]
        alias: Text
    where
        signatory username
        observer following

        key username : Party 
        maintainer key 

        ensure alias /= ""

        choice Follow: ContractId SocialNetworkUser
            with
                userToFollow: Party
            controller username
            do       
                assertMsg "You cannot follow yourself" (userToFollow /= username)
                assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
                create this with following = userToFollow :: following

        nonconsuming choice ChangeAlias: ContractId SocialNetworkUser
            with
                newAlias: Text
            controller username
            do
                when (newAlias == "") $ -- import DA.Action (when)
                    throw ChangeFailed with
                        fieldName = "alias"
                        details = "cannot be empty"
                
                archive self 
                create this with alias = newAlias


-- Custom Exception
exception ChangeFailed
    with
        fieldName: Text
        details: Text
    where
        message "Provided input is invalid."



test = script do
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"

    aliceCid <- submit alice do
        createCmd SocialNetworkUser with
            username = alice
            following = []
            alias = "aliceAlias"
    
    submit alice do 
        exerciseCmd aliceCid ChangeAlias with newAlias = ""
















-- case ver.
-- nonconsuming choice ChangeAlias: Either Text (ContractId SocialNetworkUser)
--     with
--         newAlias: Text
--     controller username
--     do
--         case newAlias of
--             "" -> do
--                 let 
--                     err = ChangeFailed with 
--                         fieldName = "alias"
--                         details = "cannot be empty"
--                     result = Left $ err.fieldName <> " " <> err.details
--                 pure result

--             _ -> do
--                 archive self
--                 cid <- create this with alias = newAlias
--                 let result = Right cid 
--                 pure result